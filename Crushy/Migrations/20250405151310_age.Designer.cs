// <auto-generated />
using System;
using Crushy.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Crushy.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250405151310_age")]
    partial class age
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Crushy.Models.BlockedUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BlockedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("BlockedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BlockedUserId");

                    b.HasIndex("UserId");

                    b.ToTable("BlockedUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BlockedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BlockedUserId = 5,
                            CreatedAt = new DateTime(2025, 4, 3, 15, 13, 9, 288, DateTimeKind.Utc).AddTicks(1194),
                            IsDeleted = false,
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            BlockedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BlockedUserId = 11,
                            CreatedAt = new DateTime(2025, 3, 31, 15, 13, 9, 288, DateTimeKind.Utc).AddTicks(1197),
                            IsDeleted = false,
                            UserId = 6
                        },
                        new
                        {
                            Id = 3,
                            BlockedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BlockedUserId = 12,
                            CreatedAt = new DateTime(2025, 4, 2, 15, 13, 9, 288, DateTimeKind.Utc).AddTicks(1200),
                            IsDeleted = false,
                            UserId = 8
                        },
                        new
                        {
                            Id = 4,
                            BlockedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BlockedUserId = 4,
                            CreatedAt = new DateTime(2025, 3, 29, 15, 13, 9, 288, DateTimeKind.Utc).AddTicks(1202),
                            IsDeleted = false,
                            UserId = 10
                        });
                });

            modelBuilder.Entity("Crushy.Models.MatchedUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("MatchedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("User1Id")
                        .HasColumnType("int");

                    b.Property<int>("User2Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("User1Id");

                    b.HasIndex("User2Id");

                    b.ToTable("MatchedUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MatchedAt = new DateTime(2025, 3, 26, 15, 13, 9, 288, DateTimeKind.Utc).AddTicks(531),
                            User1Id = 2,
                            User2Id = 3
                        },
                        new
                        {
                            Id = 2,
                            MatchedAt = new DateTime(2025, 3, 31, 15, 13, 9, 288, DateTimeKind.Utc).AddTicks(534),
                            User1Id = 4,
                            User2Id = 5
                        },
                        new
                        {
                            Id = 3,
                            MatchedAt = new DateTime(2025, 3, 21, 15, 13, 9, 288, DateTimeKind.Utc).AddTicks(536),
                            User1Id = 6,
                            User2Id = 7
                        },
                        new
                        {
                            Id = 4,
                            MatchedAt = new DateTime(2025, 3, 28, 15, 13, 9, 288, DateTimeKind.Utc).AddTicks(747),
                            User1Id = 8,
                            User2Id = 9
                        },
                        new
                        {
                            Id = 5,
                            MatchedAt = new DateTime(2025, 4, 2, 15, 13, 9, 288, DateTimeKind.Utc).AddTicks(750),
                            User1Id = 10,
                            User2Id = 11
                        },
                        new
                        {
                            Id = 6,
                            MatchedAt = new DateTime(2025, 3, 24, 15, 13, 9, 288, DateTimeKind.Utc).AddTicks(752),
                            User1Id = 2,
                            User2Id = 7
                        },
                        new
                        {
                            Id = 7,
                            MatchedAt = new DateTime(2025, 3, 29, 15, 13, 9, 288, DateTimeKind.Utc).AddTicks(754),
                            User1Id = 3,
                            User2Id = 8
                        });
                });

            modelBuilder.Entity("Crushy.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("int");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Merhaba, nasılsın?",
                            CreatedAt = new DateTime(2025, 3, 27, 15, 13, 9, 288, DateTimeKind.Utc).AddTicks(1072),
                            IsDeleted = false,
                            ReceiverId = 3,
                            SenderId = 2,
                            SentAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            Content = "İyiyim, teşekkürler! Sen nasılsın?",
                            CreatedAt = new DateTime(2025, 3, 27, 15, 18, 9, 288, DateTimeKind.Utc).AddTicks(1077),
                            IsDeleted = false,
                            ReceiverId = 2,
                            SenderId = 3,
                            SentAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            Content = "Selam! Profilini çok beğendim.",
                            CreatedAt = new DateTime(2025, 4, 1, 15, 13, 9, 288, DateTimeKind.Utc).AddTicks(1082),
                            IsDeleted = false,
                            ReceiverId = 5,
                            SenderId = 4,
                            SentAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            Content = "Teşekkür ederim, seninkini de beğendim!",
                            CreatedAt = new DateTime(2025, 4, 1, 15, 23, 9, 288, DateTimeKind.Utc).AddTicks(1084),
                            IsDeleted = false,
                            ReceiverId = 4,
                            SenderId = 5,
                            SentAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            Content = "Merhaba, burada yeni misin?",
                            CreatedAt = new DateTime(2025, 3, 22, 15, 13, 9, 288, DateTimeKind.Utc).AddTicks(1094),
                            IsDeleted = false,
                            ReceiverId = 7,
                            SenderId = 6,
                            SentAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            Content = "Evet, yeni kayıt oldum. Seni tanımaktan memnun oldum!",
                            CreatedAt = new DateTime(2025, 3, 22, 15, 28, 9, 288, DateTimeKind.Utc).AddTicks(1096),
                            IsDeleted = false,
                            ReceiverId = 6,
                            SenderId = 7,
                            SentAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7,
                            Content = "Selam! Hangi şehirde yaşıyorsun?",
                            CreatedAt = new DateTime(2025, 3, 29, 15, 13, 9, 288, DateTimeKind.Utc).AddTicks(1099),
                            IsDeleted = false,
                            ReceiverId = 9,
                            SenderId = 8,
                            SentAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 8,
                            Content = "İstanbul'da yaşıyorum. Sen nerelisin?",
                            CreatedAt = new DateTime(2025, 3, 29, 15, 21, 9, 288, DateTimeKind.Utc).AddTicks(1101),
                            IsDeleted = false,
                            ReceiverId = 8,
                            SenderId = 9,
                            SentAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 9,
                            Content = "Merhaba, hobilerin neler?",
                            CreatedAt = new DateTime(2025, 4, 3, 15, 13, 9, 288, DateTimeKind.Utc).AddTicks(1109),
                            IsDeleted = false,
                            ReceiverId = 11,
                            SenderId = 10,
                            SentAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 10,
                            Content = "Merhaba! Yüzmeyi, kitap okumayı ve film izlemeyi seviyorum. Sen nelerden hoşlanırsın?",
                            CreatedAt = new DateTime(2025, 4, 3, 15, 33, 9, 288, DateTimeKind.Utc).AddTicks(1112),
                            IsDeleted = false,
                            ReceiverId = 10,
                            SenderId = 11,
                            SentAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 11,
                            Content = "Merhaba, seni tanımaktan memnun oldum!",
                            CreatedAt = new DateTime(2025, 3, 25, 15, 13, 9, 288, DateTimeKind.Utc).AddTicks(1115),
                            IsDeleted = false,
                            ReceiverId = 7,
                            SenderId = 2,
                            SentAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 12,
                            Content = "Ben de memnun oldum! Nasıl gidiyor?",
                            CreatedAt = new DateTime(2025, 3, 25, 15, 43, 9, 288, DateTimeKind.Utc).AddTicks(1130),
                            IsDeleted = false,
                            ReceiverId = 2,
                            SenderId = 7,
                            SentAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 13,
                            Content = "Profilin çok ilgi çekici görünüyor. Nelerden hoşlanırsın?",
                            CreatedAt = new DateTime(2025, 3, 30, 15, 13, 9, 288, DateTimeKind.Utc).AddTicks(1133),
                            IsDeleted = false,
                            ReceiverId = 8,
                            SenderId = 3,
                            SentAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 14,
                            Content = "Teşekkürler! Müzik dinlemeyi, yemek yapmayı ve doğada vakit geçirmeyi seviyorum.",
                            CreatedAt = new DateTime(2025, 3, 30, 15, 28, 9, 288, DateTimeKind.Utc).AddTicks(1135),
                            IsDeleted = false,
                            ReceiverId = 3,
                            SenderId = 8,
                            SentAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 15,
                            Content = "Bu hafta sonu bir şeyler yapmak ister misin?",
                            CreatedAt = new DateTime(2025, 4, 3, 15, 13, 9, 288, DateTimeKind.Utc).AddTicks(1138),
                            IsDeleted = false,
                            ReceiverId = 5,
                            SenderId = 4,
                            SentAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Crushy.Models.SubscriptionPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DurationInDays")
                        .HasColumnType("int");

                    b.Property<string>("Features")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("SubscriptionPlans");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DurationInDays = 0,
                            Features = "Premium üyelik paketi",
                            Name = "Premium",
                            Price = 29.99m
                        },
                        new
                        {
                            Id = 2,
                            DurationInDays = 0,
                            Features = "EVO üyelik paketi",
                            Name = "EVO",
                            Price = 49.99m
                        },
                        new
                        {
                            Id = 3,
                            DurationInDays = 0,
                            Features = "Temel üyelik paketi",
                            Name = "Basic",
                            Price = 9.99m
                        });
                });

            modelBuilder.Entity("Crushy.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Password = "$2a$11$sdlYh/EB0y7qksOS4uSdme2c421RKjwKV6wcVx7UbuAlQ5YqtR4Ne",
                            Role = "Admin",
                            Username = "admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Password = "$2a$11$VI2okUWtwKmfa7Ysfe855.ctXFKIyDKUPkOdZkE3B7LBSD4RQ.yhi",
                            Role = "VerifiedUser",
                            Username = "emma.wilson"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Password = "$2a$11$EzzIBuW8KHFvzm/JqoYgBuZvAE5tiMt//I5DCKhTJEeDBwttgH7BS",
                            Role = "VerifiedUser",
                            Username = "james.smith"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Password = "$2a$11$AJ1HQnRnxDD9DGwKl7Uc9.2vKbhRczuiGO5HfWGOOVQJ0qDGLkeHC",
                            Role = "VerifiedUser",
                            Username = "sophia.brown"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Password = "$2a$11$LP494OzE0fvv.zfHmylh/OEs9HMs7ohrt6JxhF3rGdBGebfJT8CEO",
                            Role = "VerifiedUser",
                            Username = "oliver.taylor"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Password = "$2a$11$iA7VpecC8zSWrzSnupoU8.AI/f2gXB9yPclu0BrH4x0klPPAsO0.q",
                            Role = "VerifiedUser",
                            Username = "ava.johnson"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2024, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Password = "$2a$11$v78pekC5HWUi/PcUYu8UzeRSoTfMX7aG88FiuGuRsVtbIZ4Ms3lqS",
                            Role = "VerifiedUser",
                            Username = "noah.williams"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2024, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Password = "$2a$11$jt/fRQXDrQr9hHGHXoQkpu./ihRpf7KqoQHxLhhBbqKX77FpD8iES",
                            Role = "VerifiedUser",
                            Username = "mia.davis"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2024, 2, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Password = "$2a$11$ntQerq7mLCuCG0lIfEbfyuh8Hq.7Rtts.0Y.Gyxa4xjxoD1MZC5ZW",
                            Role = "VerifiedUser",
                            Username = "liam.garcia"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2024, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Password = "$2a$11$LEXkIknXbujzsvriZlhVmu0j0iSJdfj1jDCqhlcjqgM12JbQneL8a",
                            Role = "VerifiedUser",
                            Username = "emily.miller"
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2024, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Password = "$2a$11$xjQZ0pxe8dZ5tvK9PKDeNer0gQ9IniY.49aYVvWNk4SFt8sof0KCS",
                            Role = "User",
                            Username = "ethan.anderson"
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2024, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Password = "$2a$11$G9VJMZboB2ioleVzpYd4UOT.dbzAeJzZHDidmPJyz9NMV2SDLOcW2",
                            Role = "User",
                            Username = "amelia.thomas"
                        });
                });

            modelBuilder.Entity("Crushy.Models.UserProfile", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<int>("Coin")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Map")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("UserProfiles");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Age = 35,
                            Coin = 1000,
                            Email = "admin@crushy.com",
                            Fullname = "Admin User",
                            Gender = true,
                            ImageUrl = "https://randomuser.me/api/portraits/men/1.jpg",
                            Map = "40.7128,-74.0060"
                        },
                        new
                        {
                            UserId = 2,
                            Age = 28,
                            Coin = 50,
                            Email = "emma@example.com",
                            Fullname = "Emma Wilson",
                            Gender = false,
                            ImageUrl = "https://randomuser.me/api/portraits/women/2.jpg",
                            Map = "51.5074,-0.1278"
                        },
                        new
                        {
                            UserId = 3,
                            Age = 32,
                            Coin = 75,
                            Email = "james@example.com",
                            Fullname = "James Smith",
                            Gender = true,
                            ImageUrl = "https://randomuser.me/api/portraits/men/3.jpg",
                            Map = "48.8566,2.3522"
                        },
                        new
                        {
                            UserId = 4,
                            Age = 25,
                            Coin = 30,
                            Email = "sophia@example.com",
                            Fullname = "Sophia Brown",
                            Gender = false,
                            ImageUrl = "https://randomuser.me/api/portraits/women/4.jpg",
                            Map = "52.5200,13.4050"
                        },
                        new
                        {
                            UserId = 5,
                            Age = 30,
                            Coin = 45,
                            Email = "oliver@example.com",
                            Fullname = "Oliver Taylor",
                            Gender = true,
                            ImageUrl = "https://randomuser.me/api/portraits/men/5.jpg",
                            Map = "41.9028,12.4964"
                        },
                        new
                        {
                            UserId = 6,
                            Age = 24,
                            Coin = 60,
                            Email = "ava@example.com",
                            Fullname = "Ava Johnson",
                            Gender = false,
                            ImageUrl = "https://randomuser.me/api/portraits/women/6.jpg",
                            Map = "34.0522,-118.2437"
                        },
                        new
                        {
                            UserId = 7,
                            Age = 29,
                            Coin = 55,
                            Email = "noah@example.com",
                            Fullname = "Noah Williams",
                            Gender = true,
                            ImageUrl = "https://randomuser.me/api/portraits/men/7.jpg",
                            Map = "35.6762,139.6503"
                        },
                        new
                        {
                            UserId = 8,
                            Age = 27,
                            Coin = 40,
                            Email = "mia@example.com",
                            Fullname = "Mia Davis",
                            Gender = false,
                            ImageUrl = "https://randomuser.me/api/portraits/women/8.jpg",
                            Map = "19.4326,-99.1332"
                        },
                        new
                        {
                            UserId = 9,
                            Age = 31,
                            Coin = 65,
                            Email = "liam@example.com",
                            Fullname = "Liam Garcia",
                            Gender = true,
                            ImageUrl = "https://randomuser.me/api/portraits/men/9.jpg",
                            Map = "-33.8688,151.2093"
                        },
                        new
                        {
                            UserId = 10,
                            Age = 23,
                            Coin = 35,
                            Email = "emily@example.com",
                            Fullname = "Emily Miller",
                            Gender = false,
                            ImageUrl = "https://randomuser.me/api/portraits/women/10.jpg",
                            Map = "55.7558,37.6173"
                        },
                        new
                        {
                            UserId = 11,
                            Age = 34,
                            Coin = 25,
                            Email = "ethan@example.com",
                            Fullname = "Ethan Anderson",
                            Gender = true,
                            ImageUrl = "https://randomuser.me/api/portraits/men/11.jpg",
                            Map = "37.7749,-122.4194"
                        },
                        new
                        {
                            UserId = 12,
                            Age = 26,
                            Coin = 20,
                            Email = "amelia@example.com",
                            Fullname = "Amelia Thomas",
                            Gender = false,
                            ImageUrl = "https://randomuser.me/api/portraits/women/12.jpg",
                            Map = "43.6532,-79.3832"
                        });
                });

            modelBuilder.Entity("Crushy.Models.UserSubscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PlanId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlanId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSubscriptions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EndDate = new DateTime(2025, 6, 4, 15, 13, 9, 288, DateTimeKind.Utc).AddTicks(447),
                            PlanId = 1,
                            StartDate = new DateTime(2025, 3, 6, 15, 13, 9, 288, DateTimeKind.Utc).AddTicks(437),
                            Status = "active",
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            EndDate = new DateTime(2025, 6, 19, 15, 13, 9, 288, DateTimeKind.Utc).AddTicks(451),
                            PlanId = 2,
                            StartDate = new DateTime(2025, 3, 21, 15, 13, 9, 288, DateTimeKind.Utc).AddTicks(450),
                            Status = "active",
                            UserId = 3
                        },
                        new
                        {
                            Id = 3,
                            EndDate = new DateTime(2025, 5, 20, 15, 13, 9, 288, DateTimeKind.Utc).AddTicks(454),
                            PlanId = 1,
                            StartDate = new DateTime(2025, 2, 19, 15, 13, 9, 288, DateTimeKind.Utc).AddTicks(453),
                            Status = "active",
                            UserId = 6
                        },
                        new
                        {
                            Id = 4,
                            EndDate = new DateTime(2025, 5, 5, 15, 13, 9, 288, DateTimeKind.Utc).AddTicks(457),
                            PlanId = 2,
                            StartDate = new DateTime(2025, 2, 4, 15, 13, 9, 288, DateTimeKind.Utc).AddTicks(456),
                            Status = "active",
                            UserId = 7
                        },
                        new
                        {
                            Id = 5,
                            EndDate = new DateTime(2025, 3, 6, 15, 13, 9, 288, DateTimeKind.Utc).AddTicks(460),
                            PlanId = 1,
                            StartDate = new DateTime(2025, 1, 5, 15, 13, 9, 288, DateTimeKind.Utc).AddTicks(459),
                            Status = "expired",
                            UserId = 9
                        },
                        new
                        {
                            Id = 6,
                            EndDate = new DateTime(2025, 4, 25, 15, 13, 9, 288, DateTimeKind.Utc).AddTicks(463),
                            PlanId = 3,
                            StartDate = new DateTime(2025, 3, 26, 15, 13, 9, 288, DateTimeKind.Utc).AddTicks(462),
                            Status = "active",
                            UserId = 10
                        });
                });

            modelBuilder.Entity("Crushy.Models.BlockedUser", b =>
                {
                    b.HasOne("Crushy.Models.User", "Blocked")
                        .WithMany()
                        .HasForeignKey("BlockedUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Crushy.Models.User", "User")
                        .WithMany("BlockedUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Blocked");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Crushy.Models.MatchedUser", b =>
                {
                    b.HasOne("Crushy.Models.User", "User1")
                        .WithMany("MatchesAsUser1")
                        .HasForeignKey("User1Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Crushy.Models.User", "User2")
                        .WithMany("MatchesAsUser2")
                        .HasForeignKey("User2Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User1");

                    b.Navigation("User2");
                });

            modelBuilder.Entity("Crushy.Models.Message", b =>
                {
                    b.HasOne("Crushy.Models.User", "Receiver")
                        .WithMany("ReceivedMessages")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Crushy.Models.User", "Sender")
                        .WithMany("SentMessages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Crushy.Models.UserProfile", b =>
                {
                    b.HasOne("Crushy.Models.User", "User")
                        .WithOne("Profile")
                        .HasForeignKey("Crushy.Models.UserProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Crushy.Models.UserSubscription", b =>
                {
                    b.HasOne("Crushy.Models.SubscriptionPlan", "Plan")
                        .WithMany("UserSubscriptions")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Crushy.Models.User", "User")
                        .WithMany("Subscriptions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plan");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Crushy.Models.SubscriptionPlan", b =>
                {
                    b.Navigation("UserSubscriptions");
                });

            modelBuilder.Entity("Crushy.Models.User", b =>
                {
                    b.Navigation("BlockedUsers");

                    b.Navigation("MatchesAsUser1");

                    b.Navigation("MatchesAsUser2");

                    b.Navigation("Profile")
                        .IsRequired();

                    b.Navigation("ReceivedMessages");

                    b.Navigation("SentMessages");

                    b.Navigation("Subscriptions");
                });
#pragma warning restore 612, 618
        }
    }
}
