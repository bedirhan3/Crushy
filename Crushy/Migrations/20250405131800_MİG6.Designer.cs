// <auto-generated />
using System;
using Crushy.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Crushy.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250405131800_MİG6")]
    partial class MİG6
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Crushy.Models.BlockedUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BlockedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("BlockedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BlockedUserId");

                    b.HasIndex("UserId");

                    b.ToTable("BlockedUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BlockedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BlockedUserId = 5,
                            CreatedAt = new DateTime(2025, 4, 3, 13, 17, 58, 984, DateTimeKind.Utc).AddTicks(875),
                            IsDeleted = false,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("Crushy.Models.MatchedUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("MatchedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("User1Id")
                        .HasColumnType("int");

                    b.Property<int>("User2Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("User1Id");

                    b.HasIndex("User2Id");

                    b.ToTable("MatchedUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MatchedAt = new DateTime(2025, 3, 26, 13, 17, 58, 984, DateTimeKind.Utc).AddTicks(782),
                            User1Id = 2,
                            User2Id = 3
                        },
                        new
                        {
                            Id = 2,
                            MatchedAt = new DateTime(2025, 3, 31, 13, 17, 58, 984, DateTimeKind.Utc).AddTicks(784),
                            User1Id = 4,
                            User2Id = 5
                        });
                });

            modelBuilder.Entity("Crushy.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("int");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Merhaba, nasılsın?",
                            CreatedAt = new DateTime(2025, 3, 27, 13, 17, 58, 984, DateTimeKind.Utc).AddTicks(829),
                            IsDeleted = false,
                            ReceiverId = 3,
                            SenderId = 2,
                            SentAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            Content = "İyiyim, teşekkürler! Sen nasılsın?",
                            CreatedAt = new DateTime(2025, 3, 27, 13, 22, 58, 984, DateTimeKind.Utc).AddTicks(832),
                            IsDeleted = false,
                            ReceiverId = 2,
                            SenderId = 3,
                            SentAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            Content = "Selam! Profilini çok beğendim.",
                            CreatedAt = new DateTime(2025, 4, 1, 13, 17, 58, 984, DateTimeKind.Utc).AddTicks(835),
                            IsDeleted = false,
                            ReceiverId = 5,
                            SenderId = 4,
                            SentAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Crushy.Models.SubscriptionPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DurationInDays")
                        .HasColumnType("int");

                    b.Property<string>("Features")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("SubscriptionPlans");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DurationInDays = 0,
                            Features = "Premium üyelik paketi",
                            Name = "Premium",
                            Price = 29.99m
                        },
                        new
                        {
                            Id = 2,
                            DurationInDays = 0,
                            Features = "EVO üyelik paketi",
                            Name = "EVO",
                            Price = 49.99m
                        });
                });

            modelBuilder.Entity("Crushy.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Password = "$2a$11$E/Fepzvh6k7IoC9yix7f0.WLj5rSuKtsdZPJt7zoRYQI4t1XhiKD6",
                            Role = "Admin",
                            Username = "admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Password = "$2a$11$2RIcz0nRnuwBoCheLKmD2.aHS3/IBfurrapmMHqQyii9TJxBB7Z6a",
                            Role = "VerifiedUser",
                            Username = "emma.wilson"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Password = "$2a$11$Qwtn8q4aJdV1zQClOk5MPeI6DUuwoQrFzWiZ76dXRx2lve5dwkOJ.",
                            Role = "VerifiedUser",
                            Username = "james.smith"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Password = "$2a$11$Dnb2M0kDpwl/EFEBaN1.D.hYojvbNixIkXn0l5E3iXxYQsayeKbFi",
                            Role = "VerifiedUser",
                            Username = "sophia.brown"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Password = "$2a$11$JWOxfDQg4GMVV1yDMB4RyuUD3nwoG8u6rJyqmnYJZ/YhZ20Btotnu",
                            Role = "VerifiedUser",
                            Username = "oliver.taylor"
                        });
                });

            modelBuilder.Entity("Crushy.Models.UserProfile", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("Coin")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Map")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("UserProfiles");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Coin = 1000,
                            Email = "admin@crushy.com",
                            Fullname = "Admin User",
                            Gender = true,
                            ImageUrl = "https://randomuser.me/api/portraits/men/1.jpg",
                            Map = "40.7128,-74.0060"
                        },
                        new
                        {
                            UserId = 2,
                            Coin = 50,
                            Email = "emma@example.com",
                            Fullname = "Emma Wilson",
                            Gender = false,
                            ImageUrl = "https://randomuser.me/api/portraits/women/2.jpg",
                            Map = "51.5074,-0.1278"
                        },
                        new
                        {
                            UserId = 3,
                            Coin = 75,
                            Email = "james@example.com",
                            Fullname = "James Smith",
                            Gender = true,
                            ImageUrl = "https://randomuser.me/api/portraits/men/3.jpg",
                            Map = "48.8566,2.3522"
                        },
                        new
                        {
                            UserId = 4,
                            Coin = 30,
                            Email = "sophia@example.com",
                            Fullname = "Sophia Brown",
                            Gender = false,
                            ImageUrl = "https://randomuser.me/api/portraits/women/4.jpg",
                            Map = "52.5200,13.4050"
                        },
                        new
                        {
                            UserId = 5,
                            Coin = 45,
                            Email = "oliver@example.com",
                            Fullname = "Oliver Taylor",
                            Gender = true,
                            ImageUrl = "https://randomuser.me/api/portraits/men/5.jpg",
                            Map = "41.9028,12.4964"
                        });
                });

            modelBuilder.Entity("Crushy.Models.UserSubscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PlanId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlanId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSubscriptions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EndDate = new DateTime(2025, 6, 4, 13, 17, 58, 984, DateTimeKind.Utc).AddTicks(689),
                            PlanId = 1,
                            StartDate = new DateTime(2025, 3, 6, 13, 17, 58, 984, DateTimeKind.Utc).AddTicks(672),
                            Status = "active",
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            EndDate = new DateTime(2025, 6, 19, 13, 17, 58, 984, DateTimeKind.Utc).AddTicks(692),
                            PlanId = 2,
                            StartDate = new DateTime(2025, 3, 21, 13, 17, 58, 984, DateTimeKind.Utc).AddTicks(691),
                            Status = "active",
                            UserId = 3
                        });
                });

            modelBuilder.Entity("Crushy.Models.BlockedUser", b =>
                {
                    b.HasOne("Crushy.Models.User", "Blocked")
                        .WithMany()
                        .HasForeignKey("BlockedUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Crushy.Models.User", "User")
                        .WithMany("BlockedUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Blocked");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Crushy.Models.MatchedUser", b =>
                {
                    b.HasOne("Crushy.Models.User", "User1")
                        .WithMany("MatchesAsUser1")
                        .HasForeignKey("User1Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Crushy.Models.User", "User2")
                        .WithMany("MatchesAsUser2")
                        .HasForeignKey("User2Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User1");

                    b.Navigation("User2");
                });

            modelBuilder.Entity("Crushy.Models.Message", b =>
                {
                    b.HasOne("Crushy.Models.User", "Receiver")
                        .WithMany("ReceivedMessages")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Crushy.Models.User", "Sender")
                        .WithMany("SentMessages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Crushy.Models.UserProfile", b =>
                {
                    b.HasOne("Crushy.Models.User", "User")
                        .WithOne("Profile")
                        .HasForeignKey("Crushy.Models.UserProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Crushy.Models.UserSubscription", b =>
                {
                    b.HasOne("Crushy.Models.SubscriptionPlan", "Plan")
                        .WithMany("UserSubscriptions")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Crushy.Models.User", "User")
                        .WithMany("Subscriptions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plan");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Crushy.Models.SubscriptionPlan", b =>
                {
                    b.Navigation("UserSubscriptions");
                });

            modelBuilder.Entity("Crushy.Models.User", b =>
                {
                    b.Navigation("BlockedUsers");

                    b.Navigation("MatchesAsUser1");

                    b.Navigation("MatchesAsUser2");

                    b.Navigation("Profile")
                        .IsRequired();

                    b.Navigation("ReceivedMessages");

                    b.Navigation("SentMessages");

                    b.Navigation("Subscriptions");
                });
#pragma warning restore 612, 618
        }
    }
}
